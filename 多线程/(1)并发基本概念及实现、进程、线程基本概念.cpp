#include<iostream>
using namespace std;

int main() {
	一：并发、进程、线程基本概念和综述
	并发、线程、进程要求必须掌握！！！
	(1.1)并发
	两个 或者更多的任务（独立的活动）同时发生（进行）:一个程序同时执行多个任务；
	以往计算机，单核cpu；某一个时刻只能执行一个任务：有操作系统调度，每秒中为单位进行多次“任务切换”
	并发的假象（不是真正的并发）；这种切换叫做（上下文切换）是要有时间开销的 ，比如操作系统保存切换时的各种状态，
	执行进度等信息，都需要保存，执行进度等信息，都需要时间，一会切换回来的时候都需要复原。

	随着硬件的发展，出现了多处理器计算机：用于服务器和高性能计算领域。
	台式机：在一块芯片上有多核（多个）cpu：双核，4核，8核，10核。。。
	能够实现真正的并行执行多个任务（硬件并发）；
	使用并发的原因：主要就是同时可以干多个任务，提高性能。

	(1.2)可执行程序
	磁盘上的一个文件，windows下，一个扩展名为.exe的。linux，ls -al rwx(x代表可执行文件)

	(1.3)进程：可执行文件时能够运行的
	windows下，双击一个可执行程序来运行。    linux下  ./文件名  ./a;
	进程，就是一个可执行程序运行起来了，就叫创建了进程。
	进程，就是运行起来了的可执行程序。

	(1.4)线程
	a)每个进程（执行起来的可执行程序），都有一个主线程，这个主线程是唯一的，也就是一个进程中只能有一个主线程。
	b)当执行了一个可执行程序，产生了一个进程后，这个主线程就随着这个进程默默的启动起来了。
	运行程序的时候，实际上是进程的主线程来执行（调用）这个main函数中的代码。
	主线程与进程共生死
	线程：用来执行代码的；
	线程这个东西，理解成一条代码的执行通路（道路）

	处理主线程之外，可以通过自己写代码创建其他线程，其他线程走的是别的道路。甚至去不同的地方。
	每创建一个新线程，就可以在同一个时刻，多干一个不同的事（多走一条不同的代码执行路径）

	多线程（并发）
	线程并不是越多越好，每个线程，都需要一个独立的堆栈空间（1M），线程之间的切换要保存很多中间状态；
	切换会耗费本该属于程序运行的时间；

	总结线程：
	a)线程是用来执行代码的
	b)把线程这个东西理解成一条代码的执行通路（道路），一个新线程代表一条新的通路。
	c)一个进程自动包含一个主线程，主线程随着进程默默的启动并运行，可以通过编码来创建多个其他线程（非主线程）
			但是创建的数量最大都不建议超过200-300个,至于到底多少个合适，可以在实际项目中调整，线程太多效率反而会降低。
	d)因为主线程是自动启动的，所以一个进程中最少也是有一个线程（主线程）。进程和主线程是爹和儿子的关系
	e)多线程程序可以同时干多个事，所以运行效率高。但是到底有多高，是很难以估计的。
	
	(1.5)学习心得
	开发多线程程序：实力的体现。一个是商用的必须需求；
	线程开发有一定的难度。实现代码更复杂。理解上更难一些，需要一定的学习时间
	c++线程会涉及很多新概念，对于c++道路上的成长特别关键，不要急于求成；

	二：并发的实现方法
	多个任务同时执行
	实现并发的手段：
	a)通过多个进程实现并发。
	b)在单独的进程中，创建多个线程来实现并发，自己写代码来创建处理主线程之外的其他线程。

	（2.1）多进程并发
	word启动之后就是进程。ie启动之后就是个进程。
	账号服务器，游戏逻辑服务器。服务器进程之间的通讯。
	进程间通讯（同一个电脑上，：管道，文件，消息队列，共享内存）
			不同电脑上：socket通信技术；

	(2.2)多线程并发：单个进程中创建了多个线程。
	线程：感觉像轻量级的进程。每个线程都有自己独立的运行路径，但是一个进程中的所有线程共享地址空间（共享内存）；
		全局变量，指正，引用都可以在线程之间传递，所以使用多线程开销远远小于多进程
	共享内存带来新问题，数据一致性问题：线程A，线程B，同时使用一块内存

	多进程并发和多线程并发虽然可以混合使用，但是应该优先考虑多线程手段而不是多进程
	本章中，只讲多线程并发开发技术。后续谈到并发，都是只多线程并发。

	(2.3)总结
	和进程比，线程的优点如下：
	(1)线程启动速度更快，更轻量级。
	(2)系统资源开销更小，执行速度更快
	缺点
	(1)使用有一定的难度，要小心处理数据的一致性问题

	三c++11新标准库
	以往：windows  : CreateThread() , _beginthred()._beginthredexe()  创建线程
	linux:pthread_create:创建线程

	临界区，互斥量；
	以往的多线程代码不能跨平台

	POSIX thread(pthread) : 夸平台；做一番配置，所以用起来也不是那么方便

	从c++11新标准，c++语言本身增加对多线程的支持，意味着可移植性（夸平台）；，这大大减少开发人员的工作量l

	return 0;
}