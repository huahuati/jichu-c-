	
	一：命名空间概念简介
		命名空间 就是为了防止名字冲突而引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名；
		可以把命名空间看成一个作用域，我在在这个命名空间里面定义函数，跟你另外一个命名空间里定义函数，即使同名，也互不影响。

		（1）命名空间定义
			namespace 命名空间
			{	
					.....	
			}

		（2）命名空间的定义可以不连续，甚至可以写在多个文件中。如果以往没有定义这个命名空间，那么" namespace  命名空间" 这种写法
			就相当于定义了一个空间。如果以往已经定义了这个命名空间，那么"namespace 命名空间 " 这种写法就相当于打开已经存在的命名
			空间并未其添加新成员声明。

		（3） 外界如何访问某个命名空间中的函数：
				格式：命名空间名::实体名     -------其中这::叫"作用域运算符"

	二：基本输入，输出cin,cout精解
		
		iostream库（输入输出流） 什么叫流： 流就是一个字符序列。
			std::cout <<"跟高兴一起学习";

		(1) std::命名空间 ，标准库命名空间。
		(2) cout ，发音 c out (console output) ，是个对象
			c语言中 叫结构 ，c++中叫类
			c语言中定义一个结构变量，在c++中， 不叫结构变量，叫他对象
		(3) << : "输出" 运算符。表示将 << 右边的值写到 cout 去了;.
			<< 可以当成函数，有参数。第一个参数在左边，就是cout对象。
			"很高兴一起学习"当成 <<的第二个参数，在 << 右边

		(4)std::endl :也是一个对象，也可以当成一个操作符 （模板函数，函数指针）
				std::endl 一般都位于std::cout的末尾
			作用:
			(1)输出换行符 \n
			(2)强制刷新输出缓冲区，缓冲区中所有数据 都被系统清除了。
					输出缓冲区 ：一般内存 cout 输出的时候实际是输出缓冲区输出内容，
			(3)那么输出缓冲区什么时候把内容输出到屏幕去的呢
				缓冲区满了
				程序执行到main的return语句
				调用了这个std::endl了，能够 强制刷新 输出缓冲区 (把缓冲区的内容往屏幕上写)
				当系统不太繁忙的时候，系统也会查看缓冲区内容，发现新内也会正常输出到屏幕

		(5)osteam & std::cout.opearator():      << 定义 << 返回的是一个写入了给定值得cout对象。

		(6)std::cout <<"很高兴学习"      返回的是cout对象

			std:cout << x << "的平方是" >> x*x << std:endl;  等价于
			(std:cout << x )<< "的平方是" >> x*x << std:endl;  等价于
			((std:cout << x )<< "的平方是") >> x*x << std:endl;  等价于
			(((std:cout << x )<< "的平方是") >> x*x) << std:endl; 

			int i = 3
			std::cout << i-- <<i--;     //结果是 2,3,其他编译器中可能结果可能不同
			应该避免，在同一个表达式中多次的改变一个变量的值;
			i--;
			std::std<<i;
			i--;
			std::std<<i;

		(7)std::cin 标准输入
			
			(1)cin :(c in),也是个对象，叫标准输入
			(2)cin也是一个iostream相关对象。叫"标准输入"。就理解为键盘
			(3) >> 是一个 "输入"运算符
